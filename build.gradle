plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'pl.allegro.tech.build.axion-release' version '1.10.3'

    id 'com.bmuschko.docker-remote-api' version '3.2.1'

    id 'maven-publish'
}

if (project.hasProperty('mavenCentral')) {
    apply from: 'gradle/mavenCentral.gradle'
}

wrapper {
    gradleVersion = "5.6.4"
    distributionType = Wrapper.DistributionType.ALL
}

scmVersion {
    tag {
        prefix = 'axion-release'
    }

    hooks {
        pre 'fileUpdate', [files: ['README.md', 'mkdocs.yml'], pattern: { v, p -> /'$v'/ }, replacement: { v, p -> "'$v'" }]
        pre 'commit'
    }

    versionCreator 'versionWithBranch'
}

group = 'pl.allegro.tech.build'
version = scmVersion.version

sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
}

project.ext.versions = [
        jgit: '5.6.0.201912101111-r',
        jsch: '0.1.54',
        jschAgent: '0.0.9'
]

sourceSets {
    main {
        java { srcDirs = [] }    // no source dirs for the java compiler
        groovy { srcDirs = ["src/main/java", "src/main/groovy"] }  // compile   everything in src/ with groovy
    }

    integration {
        java.srcDir project.file('src/integration/java')
        groovy.srcDir project.file('src/integration/groovy')

        resources.srcDir project.file('src/integration/resources')
        resources.srcDir project.sourceSets.test.resources
        resources.srcDir project.sourceSets.main.resources

        compileClasspath = project.sourceSets.main.output +
                project.sourceSets.test.output +
                project.configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }

    remoteTest {
        java.srcDir project.file('src/test-remote/java')
        groovy.srcDir project.file('src/test-remote/groovy')

        resources.srcDir project.file('src/test-remote/resources')
        resources.srcDir project.sourceSets.test.resources
        resources.srcDir project.sourceSets.main.resources

        compileClasspath = project.sourceSets.main.output +
            project.sourceSets.test.output +
            project.configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: versions.jgit
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit.ui', version: versions.jgit

    compile group: 'com.jcraft', name: 'jsch', version: versions.jsch
    compile group: 'com.jcraft', name: 'jsch.agentproxy.core', version: versions.jschAgent
    compile group: 'com.jcraft', name: 'jsch.agentproxy.jsch', version: versions.jschAgent
    compile group: 'com.jcraft', name: 'jsch.agentproxy.sshagent', version: versions.jschAgent
    compile group: 'com.jcraft', name: 'jsch.agentproxy.pageant', version: versions.jschAgent
    compile group: 'com.jcraft', name: 'jsch.agentproxy.usocket-jna', version: versions.jschAgent
    compile group: 'com.jcraft', name: 'jsch.agentproxy.usocket-nc', version: versions.jschAgent

    compile group: 'com.github.zafarkhaja', name: 'java-semver', version: '0.9.0'

    testCompile (group: 'org.ajoberstar.grgit', name: 'grgit-core', version: '4.0.1') {
        exclude group: 'org.eclipse.jgit', module: 'org.eclipse.jgit.ui'
        exclude group: 'org.eclipse.jgit', module: 'org.eclipse.jgit'
    }

    testCompile(group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile group: 'cglib', name: 'cglib-nodep', version: '3.1'
    testCompile group: 'org.objenesis', name: 'objenesis', version: '2.4'
    testCompile group: 'org.apache.sshd', name: 'sshd-core', version: '1.6.0'
    testCompile group: 'org.apache.sshd', name: 'sshd-git', version: '1.6.0'

    testCompile gradleTestKit()
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}

project.configurations {
    integration {
        extendsFrom project.configurations.testRuntime
        description = 'Dependencies for integration tests'
        transitive = true
        visible = true
    }

    remoteTest {
        extendsFrom project.configurations.testRuntime
        description = 'Dependencies for tests with Docker'
        transitive = true
        visible = true
    }
}

task integrationTest(type: Test) {
    testClassesDirs = project.sourceSets.integration.output.classesDirs
    classpath = project.sourceSets.main.output +
            project.sourceSets.test.output +
            project.sourceSets.integration.runtimeClasspath +
            project.configurations.testRuntime +
            project.configurations.integrationRuntime

    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

task buildDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    inputDir = file('docker')
    tag = 'test/axion-release-remote:latest'
}

task createDockerContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
    dependsOn buildDockerImage
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['2222:22']
}

task startDockerContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.getContainerId() }
}

task stopDockerContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
    targetContainerId { createDockerContainer.getContainerId() }
}


task remoteTest(type: Test) {
    testClassesDirs = project.sourceSets.remoteTest.output.classesDirs
    classpath = project.sourceSets.main.output +
        project.sourceSets.test.output +
        project.sourceSets.remoteTest.runtimeClasspath +
        project.configurations.testRuntime +
        project.configurations.remoteTestRuntime

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }

    dependsOn startDockerContainer
    finalizedBy stopDockerContainer
}

tasks.check.dependsOn integrationTest, remoteTest

gradlePlugin {
    testSourceSets project.sourceSets.integration
    plugins {
        axionRelease {
            id = 'pl.allegro.tech.build.axion-release'
            implementationClass = 'pl.allegro.tech.build.axion.release.ReleasePlugin'
        }
    }
}

